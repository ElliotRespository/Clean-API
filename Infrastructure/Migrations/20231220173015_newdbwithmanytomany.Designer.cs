// <auto-generated />
using System;
using Infrastructure.Database.SqlDataBases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RealDatabase))]
    [Migration("20231220173015_newdbwithmanytomany")]
    partial class newdbwithmanytomany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Animal", b =>
                {
                    b.Property<Guid>("animalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("animalID");

                    b.ToTable("Animal");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Animal");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.UserAnimal", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "AnimalId");

                    b.HasIndex("AnimalId");

                    b.ToTable("UserAnimals");
                });

            modelBuilder.Entity("Domain.Models.UserModels.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7724643a-88ad-412a-942f-104f44e966df"),
                            Password = "$2a$11$4CrndVSz87CzmfQX8MYWZuJYf1wgX3yB3a8Ot.1Sc8HckCQxP7WaW",
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("e77426c2-0789-4fd4-967d-978e1cf1ed4a"),
                            Password = "$2a$11$kT.jpWNvyeIC/lMQVeBvi.CSrXzsLEdIwKyWu.7Bm4WhljSHjO0XC",
                            Role = "Normal",
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Domain.Models.Animalmodels.Cat", b =>
                {
                    b.HasBaseType("Domain.Models.Animal");

                    b.Property<bool>("LikesToPlay")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Cat");

                    b.HasData(
                        new
                        {
                            animalID = new Guid("72da4950-5c22-4ccd-930e-f52f47a56c90"),
                            Name = "Fluffig",
                            LikesToPlay = false
                        },
                        new
                        {
                            animalID = new Guid("8a83a254-f33b-4cb5-90f9-b28e3eb71dd3"),
                            Name = "Argjävel",
                            LikesToPlay = false
                        },
                        new
                        {
                            animalID = new Guid("37166ea3-fa1d-44f5-9daf-690515506bc5"),
                            Name = "Simba",
                            LikesToPlay = false
                        },
                        new
                        {
                            animalID = new Guid("fdb85896-a9f4-440d-9b79-2e8e1fb94bd7"),
                            Name = "LedsenKatt",
                            LikesToPlay = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Animalmodels.Dog", b =>
                {
                    b.HasBaseType("Domain.Models.Animal");

                    b.HasDiscriminator().HasValue("Dog");

                    b.HasData(
                        new
                        {
                            animalID = new Guid("02ae31e5-db39-4223-ae00-0fd407126c20"),
                            Name = "Kenta"
                        },
                        new
                        {
                            animalID = new Guid("9175b0af-a242-41c8-ab3d-1be9153b9db3"),
                            Name = "Knugen"
                        },
                        new
                        {
                            animalID = new Guid("ef978b71-3d71-420c-86a3-507ce0a9e3ce"),
                            Name = "Sjöberg"
                        },
                        new
                        {
                            animalID = new Guid("02af390f-9fe3-4e87-8009-8cb222d747b7"),
                            Name = "Berra"
                        },
                        new
                        {
                            animalID = new Guid("12345678-1234-5678-1234-567812345671"),
                            Name = "DogTest1"
                        },
                        new
                        {
                            animalID = new Guid("12345678-1234-5678-1234-567812345672"),
                            Name = "DogTest2"
                        },
                        new
                        {
                            animalID = new Guid("12345678-1234-5678-1234-567812345673"),
                            Name = "DogTest3"
                        },
                        new
                        {
                            animalID = new Guid("12345678-1234-5678-1234-567812345674"),
                            Name = "DogTest4"
                        });
                });

            modelBuilder.Entity("Domain.Models.UserAnimal", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("UserAnimals")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModels.UserModel", "user")
                        .WithMany("UserAnimals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.Animal", b =>
                {
                    b.Navigation("UserAnimals");
                });

            modelBuilder.Entity("Domain.Models.UserModels.UserModel", b =>
                {
                    b.Navigation("UserAnimals");
                });
#pragma warning restore 612, 618
        }
    }
}
